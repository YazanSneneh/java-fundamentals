/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import java.util.*;

import java.util.HashMap;
import java.util.Map;

public class Library {
    public boolean someLibraryMethod() {
        return true;
    }
    // ........................................roll dice method............................................
    public static int[] roll(int n){
        int[] rollResult = new int[n];

        for(int i=0; i<n; i++){
            Random random = new Random();
            int newRandom = random.nextInt(6);
            rollResult[i] = newRandom+1;
        }

        return rollResult;
    }

// ........................................containsDuplicates...............................................
    public boolean containsDuplicates(int[] numbers){
        Set<Integer> newSet = new HashSet<>();
          for (int n : numbers){
              newSet.add(n);
          }
        return newSet.size() != numbers.length;
    }

// .....................................Calculating Averages...............................................
    public int calculateAverage(int[] numbers){
        int totalNumbers = numbers.length;
        int sum = 0;

        for(int i=0; i<totalNumbers; i++){
            sum += numbers[i];
        }
        return sum/totalNumbers;
    }
// .....................................Arrays of Arrays...............................................
    public int lowestAverage(int[][] numbersLists){

        int totalArrays = numbersLists.length;
        // int[] sumArray = new int[totalArrays];
        int lowestAvg = 10000;
        int lowestAvgsize = 0;

        for(int i=0; i<totalArrays; i++){   // first loop, go through each list.
            int sum = 0;
            for (int number : numbersLists[i]){   // second loop go through items and add values to sum variable.
                sum += number;
            }

// check for sum size and add it to lowestAvg and store it's length for calc the average
            if(sum  < lowestAvg){
                lowestAvg = sum;
                lowestAvgsize = numbersLists[i].length;
            }
        }

        return lowestAvg/lowestAvgsize;
    }
//............................................. Analyzing Weather Data .......................
    public String analyzingWeatherData(int weeklyMonthTemperatures[][]){
       //
        int length = weeklyMonthTemperatures.length;
        int min = weeklyMonthTemperatures[0][0];
        int max = weeklyMonthTemperatures[0][0];
        Set<Integer> uniqueTemp = new HashSet<>();
         String returnResult = "";
        // algo
        for(int i=0; i<length; i++){ // iterate over 2D array
            for(int j =0; j<weeklyMonthTemperatures[i].length; j++){
                uniqueTemp.add(weeklyMonthTemperatures[i][j]); // Add items to set

                if(weeklyMonthTemperatures[i][j] < min){ // check if min or max tem value
                    min = weeklyMonthTemperatures[i][j];
                }else if( weeklyMonthTemperatures[i][j] > max){
                    max = weeklyMonthTemperatures[i][j];
                }

            }
        }
        // output
        returnResult +="High: " + max + "%n Low: " + min + "%n";

        for(int i=min; i<=max; i++){
            //  uniqueTemp.get(i);
            if(!uniqueTemp.contains(i)){ // check if temp not exist and report
                returnResult += "Never saw temperature: " + i +"%n";
            }
        }
     return returnResult;
    }
//................................................ tally .................................................
   public  String  tally(ArrayList<String> votes){
       Map<String,Integer> participants = new HashMap<>();
       String winner = "";
       int winnerTotalVotes = 0;

       for(String vote : votes){ // add to map
           if( participants.containsKey(vote)){
               participants.put(vote, participants.get(vote)+1);
           }else{
               participants.put(vote, 1);
           }
       }

       for(Map.Entry vote : participants.entrySet()){  // choose winner
           if((int)vote.getValue()> winnerTotalVotes){

               winnerTotalVotes = (int)vote.getValue();
               winner = (String)vote.getKey();
           }
       }
       System.out.println(winner + " received the most votes!");
       return winner;
   }
}
